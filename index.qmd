---
# title: Scientific Discovery using Representation Learning to Interpret the Largest Cosmological Simulations
title: Representation Learning with Spherinator
subtitle: High-Performance Computing Visualization
# author: |
#   | Bernd Doser & Sebastian Trujillo-Gomez
#   | Kai Polsterer, Andreas Fehlner, Fenja Schweder, Romain Chazotte
author: <strong>Bernd Doser & Sebastian Trujillo-Gomez</strong><br>Kai Polsterer, Andreas Fehlner, Fenja Schweder, Romain Chazotte
date: 2025/05/14
date-format: "MMMM YYYY"
institute: Heidelberg Institute for Theoretical Studies (HITS)
title-slide-attributes:
  data-background-image: images/SPACE_title_slide.png
format:
  revealjs:
    logo: images/HITS_RGB_eng.jpg
    footer: "Spherinator & HiPSter (B. Doser & S. Trujillo-Gomez)"
    slide-number: true
    highlight-style: a11y
    bibliography: references.bib
    width: 1300
    template-partials:
      - title-slide.html
---

## Agenda

- **Project X**: The Big Picture
- **PEST**: Data Preprocessing
- **Spherinator**: The Training
- **HiPSter**: The Inference
- **Live demo**: Illustris TNG
- **Gaia XP DR3 spectra**: Spectral data
- **Flyte** and **StreamFlow**: Workflow Orchestration


## Associated Materials

- The presentation and demo notebooks are publicly available at\
[github.com/BerndDoser/SPACE_HPC_Visualization_Workshop](https://github.com/BerndDoser/SPACE_HPC_Visualization_Workshop)
- Related project repositories:
  - [PEST](https://github.com/HITS-AIN/PEST): Data acquisition and preprocessing
  - [Spherinator](https://github.com/HITS-AIN/Spherinator): Representation Learning using PyTorch Lightning
  - [HiPSter](https://github.com/HITS-AIN/HiPSter): Generation of HiPS maps and catalogs
- User documentation is available at
  [ReadTheDocs](https://spherinator.readthedocs.io/en/latest/index.html)


## Project X: The Big Picture

![](images/projectx_v2.png){.absolute left=0 width=1800}


## PEST: Data Preprocessing

- [PEST](https://github.com/HITS-AIN/PEST) preprocess 3D simulation data into multi-channel images, data cubes, and point clouds
- The different data types are uniquely stored as **Parquet** files
  - Efficient storage by columnar data format
  - Fast access by [Apache Arrow]()
  - Interoperable with many frameworks (e.g., PyTorch, TensorFlow) and programming languages (e.g., Python, Julia, C++, Rust)


## Spherinator: The Training

- Representation learning using a **Variational Autoencoder**
- Dimensionality reduction to a **(Hyper-)spherical** latent space
- Training with **PyTorch Lightning**

![](images/vae.svg){width="1100" fig-align="center"}

::: aside
Source: [@Polsterer2024], [@Doser2025]
:::


## Spherinator: The Power Spherical Distribution

:::: {.columns}
::: {.column width="55%"}

Normal distribution on the hyper-sphere:

$$\begin{aligned}
p_{X}(x; \mu, \kappa) = N_{X}(\kappa, d)^{-1}(1 + \mu^{\top}x)^{\kappa}
\end{aligned}$$

$d$: Dimension

$\mu$: Direction

$\kappa$: Concentration

$N_{X}$: Normalization factor
:::

::: {.column width="45%"}
![](images/power_spherical.png){width="600" fig-align="center"}

:::

::::

::: aside
Source: [@DeCao2020]
:::


## HiPSter: The Inference

HiPS - Hierarchical Progressive Survey

![](images/HEALPix.png){width="700"}

- The HiPS tiles are reconstructed with the corresponding spherical latent space position.

- The HiPS tilings are visualized with [Aladin-Lite](https://github.com/cds-astro/aladin-lite).

::: aside
Source: [@Fernique_2015]
:::

# Let's begin the demonstration!


## Gaia DR3 XP spectra

::: {layout='[1,1]'}
::: n1
::: {style="font-size: 80%;"}
[Gaia DR3 XP](http://cdn.gea.esac.esa.int/Gaia/gdr3/) 
contains over 200 billions blue (BP) and red (RP) spectra as continuous spectra with 55 parameters per spectrum.
![](images/calibrated_spectrum_plot.png){width="600"}


:::
:::
::: n2
```{=html}
<iframe width="600" height="600" src="https://space.h-its.org/Gaia/" title="Webpage example"></iframe>
```
:::
:::


## Workflow Orchestration with Flyte

[Flyte]() is a highly scalable **cloud-native** workflow orchestration platform on top of containers and Kubernetes

![](images/flyte-architecture.svg){fig-align="center"}


## Workflow Orchestration with StreamFlow

[StreamFlow]() executes **Common Workflow Language (CWL)** using a deployment model that includes containers, Slurm (HPC), and Kubernetes.

![](images/streamflow-model.png){width="40%" fig-align="center"}

::: aside
Source: [StreamFlow](
https://streamflow.di.unito.it/documentation/0.2/guide/architecture.html)
:::


## Summary and Outlook

- Modular and flexible data workflow (Project X)
- Uniform interconnectivity
  - **Parquet** for data storage
  - **ONNX** for model exchange
- Workflow Orchestration ([ML Workflow Seminar](https://bernddoser.github.io/ML-workflow-orchestration/))
  - **Flyte** for cloud-native workflows
  - **StreamFlow** for HPC workflows
- Prototype for **Illustris TNG** and **Gaia DR3 XP** is available at [space.h-its.org](https://space.h-its.org)


## Acknowledgement & Disclaimer {background-image="images/SPACE_acknowledgement_background.png"}


## References
